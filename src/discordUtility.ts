import {
  ActivityType,
  ChannelType,
  type Client,
  type Collection,
  type Guild,
  type GuildBasedChannel,
  type GuildMember,
  type GuildVoiceChannelResolvable,
  OAuth2Scopes,
  PermissionFlagsBits,
  type VoiceChannel,
} from "discord.js";
import type { MqttClient } from "mqtt";
import type { BotConfig } from "./models/BotConfig";

/**
 * Retrieves a guild-based channel by name from the Discord client.
 *
 * @param {string} channelName - The name of the channel to retrieve.
 * @param {Client} discordClient - The Discord client object.
 * @param {BotConfig} config - The configuration for the bot.
 * @return {Promise<GuildBasedChannel>} The channel with the specified name.
 */
export async function getChannelByName(
  channelName: string,
  discordClient: Client,
  config: BotConfig,
): Promise<GuildBasedChannel> {
  const guild = await getGuild(discordClient, config);
  const channels = (await guild.channels.fetch()) as Collection<
    string,
    GuildBasedChannel
  >;
  const channel = channels.find(
    (c) => c.name.toLowerCase() === channelName.toLowerCase(),
  );
  if (!channel) throw new Error(`Channel "${channelName}" not found.`);
  return channel;
}

/**
 * Retrieves the current user from the specified Discord client and configuration.
 *
 * @param {Client} discordClient - The Discord client
 * @param {BotConfig} config - The bot configuration
 * @return {Promise<GuildMember>} The retrieved guild member
 */
export async function getSelf(
  discordClient: Client,
  config: BotConfig,
): Promise<GuildMember> {
  const guild = await getGuild(discordClient, config);
  const member = guild.members.fetch(config.you.id);
  if (!member) {
    throw new Error(`Your member ID ${config.you.id} was not found in guild.`);
  }
  return member;
}

/**
 * Moves the bot to a voice channel by name.
 *
 * @param {string} channelName - the name of the channel to move to
 * @param {GuildMember} you - the user moving to the channel
 * @param {Client} discordClient - the Discord bot client
 * @param {BotConfig} config - the configuration for the bot
 * @return {Promise<void>} a Promise that resolves when the bot is moved to the channel
 */
export async function moveToChannelByName(
  channelName: string,
  you: GuildMember,
  discordClient: Client,
  config: BotConfig,
): Promise<void> {
  const channel = await getChannelByName(channelName, discordClient, config);
  if (channel) {
    console.info(`Moving to channel: ${channel.name}`);
    if (you.voice.channel) {
      you.voice.setChannel(channel as GuildVoiceChannelResolvable);
    } else {
      console.warn("You are not in a voice channel.");
    }
  } else {
    console.error(`Unknown channel name: ${channelName}`);
  }
}
/**
 * Sets the activity of the bot to the specified value.
 *
 * @param {string} botActivity - the activity to set for the bot
 * @return {void}
 */

export function setBotActivity(
  botActivity: string,
  discordClient: Client,
  mqttClient: MqttClient,
  config: BotConfig,
): void {
  console.info(`Setting bot activity: ${botActivity}`);
  if (!discordClient.user) {
    throw new Error("User is null - bot client is not properly initialized.");
  }
  discordClient.user.setPresence({
    activities: [
      {
        name: botActivity,
        type: ActivityType.Custom,
      },
    ],
    status: "online",
  });
  mqttClient.publish(config.mqtt.topics.activity, botActivity);
}
/**
 * Prints the invite link generated by the discordClient with specific permissions and scopes.
 */
export function printInviteLink(discordClient: Client): void {
  const inviteLink = discordClient.generateInvite({
    permissions: [
      PermissionFlagsBits.ViewChannel,
      PermissionFlagsBits.MuteMembers,
      PermissionFlagsBits.DeafenMembers,
      PermissionFlagsBits.MoveMembers,
      PermissionFlagsBits.ChangeNickname,
    ],
    scopes: [
      OAuth2Scopes.Bot,
      OAuth2Scopes.ApplicationsCommands,
      OAuth2Scopes.Guilds,
      OAuth2Scopes.GuildsMembersRead,
    ],
  });
  console.log(`Invite link: ${inviteLink}`);
}
/**
 * Retrieves the guild from the cache using the configured guild id.
 *
 * @param {Client} discordClient - The Discord client instance.
 * @param {BotConfig} config - The bot configuration.
 * @return {Promise<Guild>} A promise that resolves to the retrieved guild object.
 * @throws {Error} Throws an error if the guild is not found.
 */
export async function getGuild(
  discordClient: Client,
  config: BotConfig,
): Promise<Guild> {
  const guild = await discordClient.guilds.fetch(config.guild.id);
  if (!guild) throw new Error("Guild not found.");
  return guild;
}

/**
 * Sets the nickname of the bot using the provided botNick, discordClient, and config.
 *
 * @param {string} botNick - the new nickname for the bot
 * @param {Client} discordClient - the Discord client
 * @param {BotConfig} config - the configuration for the bot
 * @return {Promise<void>} a Promise that resolves when the nickname is set
 */
export async function setBotNickname(
  botNick: string,
  discordClient: Client,
  config: BotConfig,
): Promise<void> {
  const bot = await getBotMember(discordClient, config);
  console.debug("Checking bot permissions to update nickname...");
  if (bot.permissions.has(PermissionFlagsBits.ChangeNickname)) {
    console.info(`Setting bot nick: ${botNick}`);
    bot.setNickname(botNick);
  } else {
    console.error(
      "The bot does not have permission to change nicknames. Requires CHANGE_NICKNAME.",
    );
  }
}

/**
 * Retrieves the voice channels that the bot has permission to join in the specified guild.
 *
 * @param {Client} discordClient - the Discord client
 * @param {BotConfig} config - the bot configuration
 * @return {Collection<string, VoiceChannel>} the voice channels that the bot has permission to join
 */
export async function getVoiceChannels(
  discordClient: Client,
  config: BotConfig,
) {
  const guild = await getGuild(discordClient, config);
  const self = await getSelf(discordClient, config);
  // Wait for the voice channels to be cached.
  let channels = await guild.channels.fetch();
  // Filter to only channels that config.you.id has permission to join.
  channels = channels.filter((c) =>
    c
      ? self
          .permissionsIn(c)
          .has(PermissionFlagsBits.ViewChannel | PermissionFlagsBits.Connect)
      : false,
  );
  return channels.filter(
    (c) => c?.type === ChannelType.GuildVoice,
  ) as Collection<string, VoiceChannel>;
}

/**
 * Retrieves the names of voice channels using the provided Discord client and bot configuration.
 *
 * @param {Client} discordClient - The Discord client instance
 * @param {BotConfig} config - The bot configuration
 * @return {Promise<string[]>} A Promise that resolves to an array of channel names
 */
export async function getVoiceChannelNames(
  discordClient: Client,
  config: BotConfig,
): Promise<string[]> {
  const channels = await getVoiceChannels(discordClient, config);
  return channels.map((channel) => channel.name);
}

/**
 * Retrieves the bot member of the specified Discord guild using the provided client and bot configuration.
 *
 * @param {Client} discordClient - The Discord client used to interact with the API.
 * @param {BotConfig} config - The configuration settings for the bot.
 * @return {Promise<GuildMember>} The bot member of the specified guild.
 */
export async function getBotMember(
  discordClient: Client,
  config: BotConfig,
): Promise<GuildMember> {
  const guild = await getGuild(discordClient, config);
  const botMember: GuildMember | null = guild.members.me;
  if (!botMember) throw new Error("Bot member not found.");
  return botMember;
}
